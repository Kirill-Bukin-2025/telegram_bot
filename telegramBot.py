# telegramBot.py
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_DEPARTMENT, SELECTING_SUBTOPIC = range(2)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤ –∫–ª–∏–Ω–∏–∫–∏ —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º–∏
DEPARTMENTS = {
    'therapy': {
        'name': 'üßë‚öïÔ∏è –¢–µ—Ä–∞–ø–µ–≤—Ç',
        'keywords': ['—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–ø—Ä–æ—Å—Ç—É–¥–∞', '–≥—Ä–∏–ø–ø', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–∫–∞—à–µ–ª—å', '–≥–æ—Ä–ª–æ'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–û–†–í–ò/–ì—Ä–∏–ø–ø': ['–ø—Ä–æ—Å—Ç—É–¥–∞', '–≥—Ä–∏–ø–ø', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'],
            '–ö–∞—à–µ–ª—å': ['–∫–∞—à–µ–ª—å', '–±—Ä–æ–Ω—Ö–∏—Ç', '–≥–æ—Ä–ª–æ'],
            '–û–±—â–µ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ': ['—Å–ª–∞–±–æ—Å—Ç—å', '–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ', '—É—Å—Ç–∞–ª–æ—Å—Ç—å']
        }
    },
    'surgery': {
        'name': 'üî™ –•–∏—Ä—É—Ä–≥–∏—è',
        'keywords': ['—Ö–∏—Ä—É—Ä–≥', '–æ–ø–µ—Ä–∞—Ü–∏—è', '–ø–µ—Ä–µ–ª–æ–º', '—Ç—Ä–∞–≤–º–∞', '—Ä–∞–Ω–∞', '—à–æ–≤'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–¢—Ä–∞–≤–º—ã': ['–ø–µ—Ä–µ–ª–æ–º', '—Ç—Ä–∞–≤–º–∞', '—É—à–∏–±'],
            '–ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ö–æ–¥': ['—à–æ–≤', '–æ–ø–µ—Ä–∞—Ü–∏—è', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'],
            '–ì–Ω–æ–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã': ['—Ä–∞–Ω–∞', '–∞–±—Å—Ü–µ—Å—Å', '—Ñ—É—Ä—É–Ω–∫—É–ª']
        }
    },
    'pediatrics': {
        'name': 'üë∂ –ü–µ–¥–∏–∞—Ç—Ä',
        'keywords': ['–ø–µ–¥–∏–∞—Ç—Ä', '—Ä–µ–±–µ–Ω–æ–∫', '–¥–µ—Ç–∏', '–º–ª–∞–¥–µ–Ω–µ—Ü', '–≥—Ä—É–¥–Ω–∏—á–æ–∫', '–Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:',
        'subtopics': {
            '–î–æ 1 –≥–æ–¥–∞': ['–≥—Ä—É–¥–Ω–∏—á–æ–∫', '–Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π', '–º–ª–∞–¥–µ–Ω–µ—Ü'],
            '1-3 –≥–æ–¥–∞': ['–º–∞–ª—ã—à', '—è—Å–ª–∏'],
            '3-7 –ª–µ—Ç': ['–¥–æ—à–∫–æ–ª—å–Ω–∏–∫'],
            '–®–∫–æ–ª—å–Ω–∏–∫': ['—à–∫–æ–ª–∞', '–ø–æ–¥—Ä–æ—Å—Ç–æ–∫']
        }
    },
    'neurology': {
        'name': 'üß† –ù–µ–≤—Ä–æ–ª–æ–≥',
        'keywords': ['–Ω–µ–≤—Ä–æ–ª–æ–≥', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '–º–∏–≥—Ä–µ–Ω—å', '—Å–ø–∏–Ω–∞', '–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ', '—Å–æ—Å—É–¥—ã'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏': ['–º–∏–≥—Ä–µ–Ω—å', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å'],
            '–ë–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ': ['—Å–ø–∏–Ω–∞', '–æ—Å—Ç–µ–æ—Ö–æ–Ω–¥—Ä–æ–∑', '–≥—Ä—ã–∂–∞'],
            '–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è': ['–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ', '–≤–µ—Å—Ç–∏–±—É–ª—è—Ä–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç']
        }
    },
    'cardiology': {
        'name': '‚ù§Ô∏è –ö–∞—Ä–¥–∏–æ–ª–æ–≥',
        'keywords': ['–∫–∞—Ä–¥–∏–æ–ª–æ–≥', '—Å–µ—Ä–¥—Ü–µ', '–¥–∞–≤–ª–µ–Ω–∏–µ', '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–∞—Ä–∏—Ç–º–∏—è', '–±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–î–∞–≤–ª–µ–Ω–∏–µ': ['–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–≥–∏–ø–æ—Ç–æ–Ω–∏—è', '–¥–∞–≤–ª–µ–Ω–∏–µ'],
            '–ê—Ä–∏—Ç–º–∏—è': ['–∞—Ä–∏—Ç–º–∏—è', '—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ'],
            '–ë–æ–ª–∏ –≤ —Å–µ—Ä–¥—Ü–µ': ['–±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏', '—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è']
        }
    },
    'dentistry': {
        'name': 'ü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥',
        'keywords': ['—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–∑—É–±', '–∑—É–±—ã', '–∫–∞—Ä–∏–µ—Å', '–±–æ–ª–∏—Ç –∑—É–±', '–ø–ª–æ–º–±–∞'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–û—Å—Ç—Ä–∞—è –±–æ–ª—å': ['–±–æ–ª–∏—Ç –∑—É–±', '–æ—Å—Ç—Ä–∞—è –±–æ–ª—å'],
            '–ö–∞—Ä–∏–µ—Å': ['–∫–∞—Ä–∏–µ—Å', '–¥—ã—Ä–∫–∞'],
            '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–ø–ª–æ–º–±–∞', '–∫–æ—Ä–æ–Ω–∫–∞', '–ø—Ä–æ—Ç–µ–∑']
        }
    },
    'ophthalmology': {
        'name': 'üëÅÔ∏è –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥',
        'keywords': ['–æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', '–≥–ª–∞–∑', '–∑—Ä–µ–Ω–∏–µ', '–±–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–∫–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç', '–æ—á–∫–∏'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–£—Ö—É–¥—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è': ['–±–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–¥–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å', '–æ—á–∫–∏'],
            '–í–æ—Å–ø–∞–ª–µ–Ω–∏—è': ['–∫–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç', '–∫—Ä–∞—Å–Ω–æ—Ç–∞'],
            '–¢—Ä–∞–≤–º—ã': ['—Ç—Ä–∞–≤–º–∞ –≥–ª–∞–∑–∞', '–ø–æ–ø–∞–¥–∞–Ω–∏–µ –∏–Ω–æ—Ä–æ–¥–Ω–æ–≥–æ —Ç–µ–ª–∞']
        }
    },
    'dermatology': {
        'name': 'üß¥ –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥',
        'keywords': ['–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥', '–∫–æ–∂–∞', '—Å—ã–ø—å', '–∞–ª–ª–µ—Ä–≥–∏—è', '–∞–∫–Ω–µ', '—ç–∫–∑–µ–º–∞'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–ê–∫–Ω–µ': ['–∞–∫–Ω–µ', '–ø—Ä—ã—â–∏', '—É–≥—Ä–∏'],
            '–ê–ª–ª–µ—Ä–≥–∏—è': ['–∞–ª–ª–µ—Ä–≥–∏—è', '–∑—É–¥', '–∫—Ä–∞–ø–∏–≤–Ω–∏—Ü–∞'],
            '–≠–∫–∑–µ–º–∞': ['—ç–∫–∑–µ–º–∞', '—à–µ–ª—É—à–µ–Ω–∏–µ']
        }
    },
    'gastroenterology': {
        'name': 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥',
        'keywords': ['–≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', '–∂–µ–ª—É–¥–æ–∫', '–∫–∏—à–µ—á–Ω–∏–∫', '–∏–∑–∂–æ–≥–∞', '–≥–∞—Å—Ç—Ä–∏—Ç', '–¥–∏–∞—Ä–µ—è'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–ì–∞—Å—Ç—Ä–∏—Ç': ['–≥–∞—Å—Ç—Ä–∏—Ç', '–∂–µ–ª—É–¥–æ–∫', '–∏–∑–∂–æ–≥–∞'],
            '–ö–∏—à–µ—á–Ω–∏–∫': ['–¥–∏–∞—Ä–µ—è', '–∑–∞–ø–æ—Ä', '–≤–∑–¥—É—Ç–∏–µ'],
            '–ü–µ—á–µ–Ω—å': ['–ø–µ—á–µ–Ω—å', '–∂–µ–ª—á–Ω—ã–π', '–≥–µ–ø–∞—Ç–∏—Ç']
        }
    },
    'psychology': {
        'name': 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥',
        'keywords': ['–ø—Å–∏—Ö–æ–ª–æ–≥', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—Ç—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–ø–∞–Ω–∏–∫–∞'],
        'response': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        'subtopics': {
            '–î–µ–ø—Ä–µ—Å—Å–∏—è': ['–¥–µ–ø—Ä–µ—Å—Å–∏—è', '–∞–ø–∞—Ç–∏—è', '–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å'],
            '–¢—Ä–µ–≤–æ–≥–∞': ['—Ç—Ä–µ–≤–æ–≥–∞', '–ø–∞–Ω–∏–∫–∞', '—Ñ–æ–±–∏–∏'],
            '–°—Ç—Ä–µ—Å—Å': ['—Å—Ç—Ä–µ—Å—Å', '–≤—ã–≥–æ—Ä–∞–Ω–∏–µ'],
            '–°–æ–Ω': ['–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞']
        }
    }
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    buttons = [[KeyboardButton(dept['name'])] for dept in DEPARTMENTS.values()]
    buttons.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])

    await update.message.reply_text(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å?",
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É"
        )
    )

    return SELECTING_DEPARTMENT


async def handle_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END


async def handle_department(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞"""
    user_text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    if "–æ—Ç–º–µ–Ω–∞" in user_text or "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" in user_text or "–Ω–∞–∑–∞–¥" in user_text:
        return await handle_back_to_menu(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    for dept_id, dept_data in DEPARTMENTS.items():
        if dept_data['name'].lower() == user_text.lower():
            context.user_data['current_department'] = dept_id
            return await show_subtopics(update, context, dept_data)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    for dept_id, dept_data in DEPARTMENTS.items():
        if any(keyword in user_text for keyword in dept_data['keywords']):
            context.user_data['current_department'] = dept_id
            return await show_subtopics(update, context, dept_data)

    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∑–∞–ø—Ä–æ—Å
    buttons = [[KeyboardButton(dept['name'])] for dept in DEPARTMENTS.values()]
    buttons.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])

    await update.message.reply_text(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:",
        reply_markup=ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True
        )
    )
    return SELECTING_DEPARTMENT


async def show_subtopics(update: Update, context: ContextTypes.DEFAULT_TYPE, dept_data):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    if 'subtopics' not in dept_data:
        # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
        buttons = [
            [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ]

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {dept_data['name']}\n\n"
            f"–°–µ–π—á–∞—Å –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(
                buttons,
                resize_keyboard=True
            )
        )
        return SELECTING_SUBTOPIC

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    subtopic_buttons = [[KeyboardButton(st)] for st in dept_data['subtopics'].keys()]
    subtopic_buttons.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])

    await update.message.reply_text(
        dept_data['response'],
        reply_markup=ReplyKeyboardMarkup(
            subtopic_buttons,
            resize_keyboard=True
        )
    )
    return SELECTING_SUBTOPIC


async def handle_subtopic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
    user_text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    if "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" in user_text or "–Ω–∞–∑–∞–¥" in user_text or "–æ—Ç–º–µ–Ω–∞" in user_text:
        return await handle_back_to_menu(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in user_text:
        dept_id = context.user_data.get('current_department')
        if dept_id:
            dept_data = DEPARTMENTS.get(dept_id, {})
            await update.message.reply_text(
                f"–°–µ–π—á–∞—Å –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–∑ {dept_data.get('name', '–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞')}. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("/start")]],
                    resize_keyboard=True
                )
            )
            context.user_data.clear()
            return ConversationHandler.END

    dept_id = context.user_data.get('current_department')
    if not dept_id:
        return await start(update, context)

    dept_data = DEPARTMENTS.get(dept_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª
    if 'subtopics' in dept_data:
        for subtopic, keywords in dept_data['subtopics'].items():
            if subtopic.lower() == user_text.lower() or any(kw in user_text for kw in keywords):
                buttons = [
                    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
                ]

                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {dept_data['name']} -> {subtopic}\n\n"
                    f"–°–µ–π—á–∞—Å –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=ReplyKeyboardMarkup(
                        buttons,
                        resize_keyboard=True
                    )
                )
                context.user_data['current_subtopic'] = subtopic
                return SELECTING_SUBTOPIC

    # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    if 'subtopics' in dept_data:
        subtopic_buttons = [[KeyboardButton(st)] for st in dept_data['subtopics'].keys()]
        subtopic_buttons.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])

        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(
                subtopic_buttons,
                resize_keyboard=True
            )
        )
    else:
        buttons = [
            [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(
                buttons,
                resize_keyboard=True
            )
        )

    return SELECTING_SUBTOPIC


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_DEPARTMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_department)
            ],
            SELECTING_SUBTOPIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_subtopic)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    application.add_handler(CommandHandler('start', start))

    application.run_polling()


if __name__ == '__main__':
    main()